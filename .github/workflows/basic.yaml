---
name: Basic workflow

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read
  security-events: write

jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and export to Docker
      uses: docker/build-push-action@v4
      with:
        push: false
        load: true # Export to Docker Engine rather than pushing to a registry
        tags: ${{ github.run_id }}
        target: test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
    - name: Unit Testing in Docker
      run: |
        docker run --rm ${{ github.run_id }} echo "ls -alF"
    - name: Run Trivy for all CVEs (non-blocking)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ github.run_id }}
        exit-code: 0
        format: table
    - name: Run Trivy for HIGH,CRITICAL CVEs and report (blocking)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ github.run_id }}
        exit-code: 1
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'HIGH,CRITICAL'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v4
      with:
        # list of Docker images to use as base name for tags
        images: |
          ${{ secrets.DOCKERHUB_USERNAME }}/bcfinder
        # generate Docker tags based on the following events/attributes
        tags: |
          type=schedule
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha
    - name: Docker build
      uses: docker/build-push-action@v4
      with:
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }} 
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64,linux/arm/v7

    - name: Find comment for image tags
      uses: peter-evans/find-comment@v2
      if: github.event_name == 'pull_request'
      id: fc
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
        body-includes: Docker image tag(s) pushed
    
      # If PR, put image tags in the PR comments
    - name: Create or update comment for image tags
      uses: peter-evans/create-or-update-comment@v2
      if: github.event_name == 'pull_request'
      with:
        comment-id: ${{ steps.fc.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          Docker image tag(s) pushed:
          ```text
          ${{ steps.meta.outputs.tags }}
          ```

          Labels added to images:
          ```text
          ${{ steps.meta.outputs.labels }}
          ```
        edit-mode: replace